#library "SH_PlayerTick"
#import "SH_GlobalData.acsx"

#include "zcommon.acs"

// *******************
// Player Tick Handler
// *******************

#define NUM_INVUL_SONGS 11
str inv_music_list[NUM_INVUL_SONGS] = {
	"FP_INVUL",
	"UT_ASGOR",
	"UT_DANCE",
	"UT_BTIME",
	"E2_TANGE",
	"E1_BUTTV",
	"CB1_MASK",
	"SK_STAR",
	"S3_STAR",
	"SM_SUPER",
	"SMG_STAR",
};

script "SV_PLAYERTICKER" OPEN
{
	if(IsNetworkGame() && (ConsolePlayerNumber() != -1)) // Hack to prevent Zandronum from executing this on a client
		terminate;

	int tickNum = 0;
	SetActivator(-1);

	while(1)
	{
		tickNum++;
		for(int p = 0; p < MAX_PLAYERS; p++)
		{
			if(!PlayerInGame(p))
				continue;

			SetActivatorToPlayer(p);

			if(GetActorProperty(0, APROP_Health) <= 0)
				continue;

			// Check for invulnerability types.
			if(CheckInventory("PowerFiendUlt"))
				p_status[p].invul_type = INVUL_ULT;
			else if(CheckInventory("PowerInvulnerable"))
				p_status[p].invul_type = INVUL_NORMAL;
			else
				p_status[p].invul_type = INVUL_NONE;

			// If our invulnerability type changes from the last recorded, set music.
			if(p_status[p].last_invul_type != p_status[p].invul_type)
			{
				switch (p_status[p].invul_type)
				{
					case INVUL_ULT:
						LocalSetMusic("S4_METAL");
						break;
					case INVUL_NORMAL:
						// Commented out because this is shitting dicks for some unknown reason.
						//int choice = random(0, NUM_INVUL_SONGS-1);
						//str music = inv_music_list[choice];
						
						str keyname = StrParam(s:"INVMUS", d:random(1,NUM_INVUL_SONGS));
						str music = StrParam(l:keyname);
						LocalSetMusic(music);
						break;
					case INVUL_NONE:
						LocalSetMusic("*");
						break;
				}

				p_status[p].last_invul_type = p_status[p].invul_type;
			}

			// ******************
			// Heavy Metal Effect
			// ******************
			// does a player have the heavy metal effect?
			if(CheckInventory("Debuff_HeavyMetal") && p_status[p].debuff_gravity == false)
			{
				p_status[p].debuff_gravity = true;
				SetActorProperty (0, APROP_Gravity, 3.0);
			}
			else if(!CheckInventory("Debuff_HeavyMetal") && p_status[p].debuff_gravity == true)
			{
				p_status[p].debuff_gravity = false;
				if(CheckActorClass(0, "Gosimer"))
					SetActorProperty(0, APROP_Gravity, 0.875);
				else
					SetActorProperty(0, APROP_Gravity, 1.0);
			}

			// ****************
			// Damage Over Time
			// ****************
			// does a player have the burn debuff?
			if(CheckInventory("Debuff_Burn"))
			{
				if(!(tickNum % 17))
					Thing_Damage2(0, random(1, 3), "Burn");
			}

			if(CheckActorClass(0, "MaximusPrime"))
			{
				// Ability Charge Regen
				if(CheckInventory("PowerStrength") && !(tickNum % 52))
					GiveInventory("AbilityCharge", 1);
					
				if(CheckInventory("PowerSupercharge"))
				{
					int chargeTics = GetActorPowerupTics(0, "PowerSupercharge");
					if(chargeTics > 0 && chargeTics <= 105 && !(chargeTics % 35))
					{
						LocalAmbientSound("PowerupAlarm", 127);
						GiveInventory("MaxHUDBlink", 1);
					}
				}

				if(!(tickNum % 105))
				{
					if((GetActorProperty(0, APROP_Health) > 200))
						SetActorProperty(0, APROP_Health, GetActorProperty(0, APROP_Health)-1);
					if(CheckInventory("BasicArmor") > 200)
						TakeInventory("BasicArmor", 1);

				}

				if(CheckInventory("Armor") > 0 && !GetArmorType("NullArmorHack", p))
				{
					int oldArmor = CheckInventory("BasicArmor");
					TakeInventory("BasicArmor", 99999);
					GiveInventory("NullArmorHack", oldArmor);
					if(GetCVar("sh_debug_armor"))
						log(s:"Swapping armor type to NullArmorHack");
				}

				// Don't bleed if we're over 50 shield.
				if(CheckInventory("BasicArmor") > 50)
				{
					if(!CheckFlag(0, "NOBLOOD"))
						ChangeFlag("NOBLOOD", true); //SetActorFlag("NOBLOOD", true);
				}
				else if(CheckFlag(0, "NOBLOOD"))
					ChangeFlag("NOBLOOD", false); //SetActorFlag(0, "NOBLOOD", false);
			}
			
			// Shield break sound.
			int cur_armor = CheckInventory("Armor");
			if(cur_armor != p_status[p].last_armor)
			{
				if(cur_armor == 0 && p_status[p].last_armor != 0)
					PlaySound(0, "Shield/break");

				p_status[p].last_armor = cur_armor;
			}
			
			// Dual Wielding Hax
			int oldbuttons = GetPlayerInput(-1, INPUT_OLDBUTTONS);
			int buttons = GetPlayerInput(-1, INPUT_BUTTONS);
			if((buttons & BT_ALTATTACK) && !(oldbuttons & BT_ALTATTACK))
			{
				GiveInventory("DualFireHax", 1);
			}
			else if(!(buttons & BT_ALTATTACK) && CheckInventory("DualFireHax"))
			{
				TakeInventory("DualFireHax", 1);
			}
		}

		SetActivator(-1);
		delay(1);
	}
}

int lastCameraPlayerClass;
script "CL_PLAYERTICKER" OPEN CLIENTSIDE
{
	int tickNum = 0;
	int consolePlayer = ConsolePlayerNumber();
	SetActivator(-1);

	while(1)
	{
		tickNum++;
		int pCam = consolePlayer;
		SetActivatorToPlayer(consolePlayer);
		if(SetActivator(0, AAPTR_PLAYER_GETCAMERA))
		{
			pCam = PlayerNumber();
			if(pCam != -1)
			{
				// If we're spectating someone with a different class than the last, force a sprite update.
				if(PlayerClass(pCam) != lastCameraPlayerClass)
				{
					SetActorState(PICKUP_SPRITE_TAG, "RecheckSprite", 0);
					lastCameraPlayerClass = PlayerClass(pCam);
				}
			}
		}
		
		for(int p = 0; p < MAX_PLAYERS; p++)
		{
			if(ThingCount(T_NONE, PINGMARKER_BASE_TAG + p) > 0)
			{
				if(pCam != -1)
					SetActivatorToPlayer(pCam); // Set to local player or whoever they are co-op spying.

				vec3_t pingPos = { GetActorX(PINGMARKER_BASE_TAG + p), GetActorY(PINGMARKER_BASE_TAG + p), GetActorZ(PINGMARKER_BASE_TAG + p) };
				vec3_t playerPos = { GetActorX(0), GetActorY(0), GetActorZ(0) };
				int distance = GetDistance3D(pingPos, playerPos);
				
				HudMessageOnActor(PINGMARKER_BASE_TAG + p, (-200)-p, 1024, 768, 0, -24, 65536, "None", StrParam(n:p+1, s:"\cc's ping\n\cb(\ccDistance: \cd", d:distance>>16, s:"\cb)"), 1873, CR_PURPLE);
				HudMessageOnActor(PINGMARKER_BASE_TAG + p, (-100)-p, 1024, 768, 0, 0, 65536, "None", "X", 1873, CR_RED);
			}

			if(!PlayerInGame(p))
				continue;

			SetActivatorToPlayer(p); // Now let's do stuff with this other player.

			if(GetActorProperty(0, APROP_Health) <= 0)
				continue;

			// *****************************
			// Blinded Lightning Bolt Effect
			// *****************************
			if(CheckInventory("Debuff_Blind"))
			{
				if(!(tickNum % 3))
					Spawn("Particle_Lightning7", GetActorX(0), GetActorY(0), GetActorZ(0) + 30.0, 0, 0);
			}

			// low health alarm
			if(GetActorProperty(0, APROP_Health) < 35)
			{
				if(!(tickNum % 70))
				{
					if(p_status[p].alarm_volume > 0.5)
						p_status[p].alarm_volume -= 0.1;

					PlayActorSound(0, SOUND_Bounce, CHAN_BODY, p_status[p].alarm_volume, false, 1.0);
				}
			}
			else
			{
				p_status[p].alarm_volume = 1.0;
			}
			
			// Dual Wielding Hax
			int oldbuttons = GetPlayerInput(-1, INPUT_OLDBUTTONS);
			int buttons = GetPlayerInput(-1, INPUT_BUTTONS);
			if((buttons & BT_ALTATTACK) && !(oldbuttons & BT_ALTATTACK))
			{
				GiveInventory("DualFireHax", 1);
			}
			else if(!(buttons & BT_ALTATTACK) && CheckInventory("DualFireHax"))
			{
				TakeInventory("DualFireHax", 1);
			}
		}

		SetActivator(-1);
		delay(1);
	}
}

script "DROP_TOKENS" (int gone) DISCONNECT
{
	int uTID;
	bool dropped = false;

	if(CheckInventory("Tier1UpgradeToken"))
	{
		uTID = UniqueTID();
		SpawnForced ("Tier1UpgradeToken", GetActorX(0), GetActorY(0), GetActorZ(0), uTID, GetActorAngle(0));
		SetActorVelocity (uTID, random(-4.0, 4.0), random(-4.0, 4.0), random(1.0, 4.0), false, false);
		dropped = true;
	}
	if(CheckInventory("Tier2UpgradeToken"))
	{
		uTID = UniqueTID();
		SpawnForced ("Tier2UpgradeToken", GetActorX(0), GetActorY(0), GetActorZ(0), uTID, GetActorAngle(0));
		SetActorVelocity (uTID, random(-4.0, 4.0), random(-4.0, 4.0), random(1.0, 4.0), false, false);
		dropped = true;
	}
	if(CheckInventory("Tier3UpgradeToken"))
	{
		uTID = UniqueTID();
		SpawnForced ("Tier3UpgradeToken", GetActorX(0), GetActorY(0), GetActorZ(0), uTID, GetActorAngle(0));
		SetActorVelocity (uTID, random(-4.0, 4.0), random(-4.0, 4.0), random(1.0, 4.0), false, false);
		dropped = true;
	}
	if(CheckInventory("Tier4UpgradeToken"))
	{
		uTID = UniqueTID();
		SpawnForced ("Tier4UpgradeToken", GetActorX(0), GetActorY(0), GetActorZ(0), uTID, GetActorAngle(0));
		SetActorVelocity (uTID, random(-4.0, 4.0), random(-4.0, 4.0), random(1.0, 4.0), false, false);
		dropped = true;
	}
	if(CheckInventory("Tier5UpgradeToken"))
	{
		uTID = UniqueTID();
		SpawnForced ("Tier5UpgradeToken", GetActorX(0), GetActorY(0), GetActorZ(0), uTID, GetActorAngle(0));
		SetActorVelocity (uTID, random(-4.0, 4.0), random(-4.0, 4.0), random(1.0, 4.0), false, false);
		dropped = true;
	}
	if(CheckInventory("Tier6UpgradeToken"))
	{
		uTID = UniqueTID();
		SpawnForced ("Tier6UpgradeToken", GetActorX(0), GetActorY(0), GetActorZ(0), uTID, GetActorAngle(0));
		SetActorVelocity (uTID, random(-4.0, 4.0), random(-4.0, 4.0), random(1.0, 4.0), false, false);
	}
	if(CheckInventory("Tier7UpgradeToken"))
	{
		uTID = UniqueTID();
		SpawnForced ("Tier7UpgradeToken", GetActorX(0), GetActorY(0), GetActorZ(0), uTID, GetActorAngle(0));
		SetActorVelocity (uTID, random(-4.0, 4.0), random(-4.0, 4.0), random(1.0, 4.0), false, false);
		dropped = true;
	}
	if(CheckInventory("Tier8UpgradeToken"))
	{
		uTID = UniqueTID();
		SpawnForced ("Tier8UpgradeToken", GetActorX(0), GetActorY(0), GetActorZ(0), uTID, GetActorAngle(0));
		SetActorVelocity (uTID, random(-4.0, 4.0), random(-4.0, 4.0), random(1.0, 4.0), false, false);
		dropped = true;
	}
	
	if(dropped)
	{
		PrintBold(n:gone+1, s:" left the game and dropped all of their tokens!");
	}
}