#library "SH_Votes"
#import "SH_GlobalData.acsx"

#include "zcommon.acs"

// Various votes that can be called in Simply Hard.
// Code by StrikerTheHedgefox.

// Sends all players back to spawn.
script "UNSTICK_PLAYER" (str who)
{
	if(!StrIcmp(who, "all") || !StrIcmp(who, "everyone"))
	{
		for(int p = 0; p < MAX_PLAYERS; p++)
		{
			if(!PlayerInGame(p))
				continue;

			SetActivatorToPlayer(p);

			GiveInventory("TeleportHax", 1);
		}
	}
}

enum
{
	TAGSTATE_UNKNOWN,
	TAGSTATE_OPENED,
	TAGSTATE_CLOSED,
};

enum
{
	D_SLOW		= 16,
	D_NORMAL	= 32,
	D_FAST		= 64,
	D_TURBO		= 128
};

enum
{
	F_SLOW		= 8,
	F_NORMAL	= 16,
	F_FAST		= 32,
	F_TURBO		= 64
};

struct tagTracker_t
{
	int tag;
	int type;
	int state;
	int portal_tag;
};
tagTracker_t tagtrackers[256];

function int find_tagtracker(int tag)
{
	for(int i = 0; i < 256; i++)
	{
		if(tagtrackers[i].tag == tag)
			return i;
	}
	
	return -1;
}

function int find_freetagslot(int tag)
{
	for(int i = 0; i < 256; i++)
	{
		if(tagtrackers[i].tag == 0)
			return i;
	}
	return -1;
}

script 13400 (int tag, int type)
{
	int slot = find_tagtracker(tag);
	if(slot == -1)
		slot = find_freetagslot(tag);
		
	if(slot != -1)
	{
		tagtrackers[slot].tag = tag;
		tagtrackers[slot].type = type;
	}
	
	TagWait(tag);
	
	switch(type)
	{
		// CLOSING TYPES
		// -------------
		case 3: // 3 = WALK,		Door_Close (tag, D_SLOW)
		case 50: // 50 = USE,		Door_Close (tag, D_SLOW)
		case 110: // 110 = WALK,	Door_Close (tag, D_FAST)
		case 113: // 113 = USE,		Door_Close (tag, D_FAST)
		{
			Door_Close(tag, ((type == 110) || (type == 113)) ? D_FAST : D_SLOW);
			
			if(slot != -1)
			{
				if(tagtrackers[slot].state != TAGSTATE_CLOSED)
				{
					HudMessageBold(s:"A door has locked near ", n:PlayerNumber() + 1;
					HUDMSG_FADEOUT | HUDMSG_LOG, 0, CR_RED, 0.5, 0.1, 5.0, 1.0, 1.0);
				}
				tagtrackers[slot].state = TAGSTATE_CLOSED;
			}
				
			break;
		}
		case 5: // 5 = WALK,		Floor_RaiseToLowestCeiling (tag, F_SLOW)
		{
			Floor_RaiseToLowestCeiling (tag, F_SLOW);
			
			if(slot != -1)
			{
				if(tagtrackers[slot].state != TAGSTATE_CLOSED)
				{
					HudMessageBold(s:"A passage has closed near ", n:PlayerNumber() + 1;
					HUDMSG_FADEOUT | HUDMSG_LOG, 0, CR_RED, 0.5, 0.1, 5.0, 1.0, 1.0);
				}
				tagtrackers[slot].state = TAGSTATE_CLOSED;
			}
				
			break;
		}
		case 19: // 19 = WALK,		Floor_LowerToHighest (tag, F_SLOW, 128)
		{
			Floor_LowerToHighest (tag, F_SLOW, 128);
			
			if(slot != -1)
			{
				if(tagtrackers[slot].state != TAGSTATE_CLOSED)
				{
					HudMessageBold(s:"A passage has closed near ", n:PlayerNumber() + 1;
					HUDMSG_FADEOUT | HUDMSG_LOG, 0, CR_RED, 0.5, 0.1, 5.0, 1.0, 1.0);
				}
				tagtrackers[slot].state = TAGSTATE_CLOSED;
			}
		}
		case 56: // 56 = WALK,		Floor_RaiseAndCrushDoom (tag, F_SLOW, 10, 2)
		{
			Floor_RaiseAndCrushDoom (tag, F_SLOW, 10, 2);
			if(slot != -1)
			{
				if(tagtrackers[slot].state != TAGSTATE_CLOSED)
				{
					HudMessageBold(s:"A passage has slammed shut near ", n:PlayerNumber() + 1;
					HUDMSG_FADEOUT | HUDMSG_LOG, 0, CR_RED, 0.5, 0.1, 5.0, 1.0, 1.0);
				}
				tagtrackers[slot].state = TAGSTATE_CLOSED;
			}
			
			break;
		}
		
		// OPENING TYPES
		// -------------
		case 23: // 23 = USE,		Floor_LowerToLowest (tag, F_SLOW)
		case 38: // 38 = WALK,		Floor_LowerToLowest (tag, F_SLOW)
		{
			//TagWait(tag);
			Floor_LowerToLowest(tag, F_SLOW);
			
			if(slot != -1)
			{
				if(tagtrackers[slot].state == TAGSTATE_CLOSED)
				{
					HudMessageBold(s:"A passage has been re-opened by ", n:PlayerNumber() + 1;
					HUDMSG_FADEOUT | HUDMSG_LOG, 0, CR_GREEN, 0.5, 0.2, 5.0, 1.0, 1.0);
				}
				tagtrackers[slot].state = TAGSTATE_OPENED;
			}
				
			break;
		}
		case 2: // 2 = WALK,		Door_Open (tag, D_SLOW)
		case 103: // 103 = USE,		Door_Open (tag, D_SLOW)
		case 109: // 109 = WALK,		Door_Open (tag, D_FAST)
		case 112: // 112 = USE,		Door_Open (tag, D_FAST)
		{
			//TagWait(tag);
			Door_Open(tag, ((type == 109) || (type == 112)) ? D_FAST : D_SLOW);
			
			if(slot != -1)
			{
				if(tagtrackers[slot].state == TAGSTATE_CLOSED)
				{
					HudMessageBold(s:"A door has been re-opened by ", n:PlayerNumber() + 1;
					HUDMSG_FADEOUT | HUDMSG_LOG, 0, CR_GREEN, 0.5, 0.2, 5.0, 1.0, 1.0);
				}
				tagtrackers[slot].state = TAGSTATE_OPENED;
			}
				
			break;
		}
	}
}

script "OPEN_ALL" (void)
{
	AmbientSound("DoorStuck", 127);
	for(int i = 0; i < 256; i++)
	{
		if(tagtrackers[i].tag != 0 && tagtrackers[i].state == TAGSTATE_CLOSED)
		{
			int tag = tagtrackers[i].tag;
			int type = tagtrackers[i].type;
			switch(type)
			{
				case 3:
				case 50:
				case 110:
				case 113:
				{
					Door_Open(tag, ((type == 110) || (type == 113)) ? D_FAST : D_SLOW);
					tagtrackers[i].state = TAGSTATE_OPENED;
					break;
				}
				case 5:
				case 19:
				case 56:
				{
					Floor_LowerToLowest(tag, F_SLOW);
					tagtrackers[i].state = TAGSTATE_OPENED;
					break;
				}
			}
		}
	}
}
