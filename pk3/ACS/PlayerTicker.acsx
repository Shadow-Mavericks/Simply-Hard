#library "PlayerTicker"
#include "Zcommon.acs"

// Imported from Korshun's ACSUtils, because Zandronum is an outdated piece of shit that doesn't seem
// to have basic, important functions that have existed since 2016.
function str ACSUtils_ChangeFlagName(str flag, bool value)
{
	return StrParam(s:"ACSUtils_CF_", s:flag, s:"_", d:(!!value));
}

function void ChangeFlag(str flag, bool value)
{
	GiveInventory(ACSUtils_ChangeFlagName(flag, value), 1);
}

struct PlayerData_t
{
	int alarm_volume;
	int invul_type;
	int last_invul_type;
	bool debuff_gravity;
};

//////////////////////
// Player Tick Handler
//////////////////////
#define MAX_PLAYERS 64

#define INVUL_NONE 0
#define INVUL_NORMAL 1
#define INVUL_ULT 2

PlayerData_t p_status[MAX_PLAYERS];

str inv_music_list[] = {
	"FP_INVUL",
	"UT_Asgor",
	"UT_DANCE",
	"UT_BTIME",
	"E2_Tange",
	"E1_Buttv",
	"CB1_MASK",
	"S&k_star",
	"S3_STAR",
	"SM_Super",
	"SMG_STAR"
};

script "SV_PLAYERTICKER" OPEN
{
	if(IsNetworkGame() && (ConsolePlayerNumber() != -1)) // Hack to prevent Zandronum from executing this on a client
		terminate;

	int tickNum = 0;
	SetActivator(-1);

	while(1)
	{
		tickNum++;
		for(int p = 0; p < MAX_PLAYERS; p++)
		{
			if(!PlayerInGame(p))
				continue;

			SetActivatorToPlayer(p);
			
			if(GetActorProperty(0, APROP_Health) <= 0)
				continue;
			
			// Check for invulnerability types.
			if(CheckInventory("PowerFiendUlt"))
				p_status[p].invul_type = INVUL_ULT;
			else if(CheckInventory("PowerInvulnerable"))
				p_status[p].invul_type = INVUL_NORMAL;
			else
				p_status[p].invul_type = INVUL_NONE;
			
			// If our invulnerability type changes from the last recorded, set music.
			if(p_status[p].last_invul_type != p_status[p].invul_type)
			{
				switch (p_status[p].invul_type)
				{
					case INVUL_ULT:
						LocalSetMusic("S4_METAL");
						break;
					case INVUL_NORMAL:
						int list_size = sizeof(inv_music_list)-1;
						LocalSetMusic(inv_music_list[random(0, list_size)]);
						break;
					case INVUL_NONE:
						LocalSetMusic("*");
						break;
				}

				p_status[p].last_invul_type = p_status[p].invul_type;
			}

			//////////////////////////////////////////////
			// Heavy Metal Effect
			//////////////////////////////////////////////
			// does a player have the heavy metal effect?
			if(CheckInventory("Debuff_HeavyMetal") && p_status[p].debuff_gravity == false)
			{
				p_status[p].debuff_gravity = true;
				SetActorProperty (0, APROP_Gravity, 3.0);
			}
			else if(!CheckInventory("Debuff_HeavyMetal") && p_status[p].debuff_gravity == true)
			{
				p_status[p].debuff_gravity = false;
				SetActorProperty(0, APROP_Gravity, 1.0);
			}

			//////////////////////////////////////////////
			// Damage Over Time
			//////////////////////////////////////////////
			// does a player have the burn debuff?
			if(CheckInventory("Debuff_Burn"))
			{
				if(!(tickNum % 17))
					Thing_Damage2(0, random(2, 4), "Burn");
			}

			if(CheckActorClass(0, "MaximusPrime"))
			{
				// Ability Charge Regen
				if(CheckInventory("PowerStrength") && !(tickNum % 52))
					GiveInventory("AbilityCharge", 1);
				
				if(!(tickNum % 105))
				{
					if((GetActorProperty(0, APROP_Health) > 200))
						SetActorProperty(0, APROP_Health, GetActorProperty(0, APROP_Health)-1);
					if(CheckInventory("BasicArmor") > 200)
						TakeInventory("BasicArmor", 1);
					
				}
				
				if(CheckInventory("Armor") > 0 && !GetArmorType("NullArmorHack", p))
				{
					int oldArmor = CheckInventory("BasicArmor");
					TakeInventory("BasicArmor", 99999);
					GiveInventory("NullArmorHack", oldArmor);
					if(GetCVar("sh_debug_armor"))
						log(s:"Swapping armor type to NullArmorHack");
				}
				
				// Don't bleed if we're over 50 shield.
				if(CheckInventory("BasicArmor") > 50)
				{
					if(!CheckFlag(0, "NOBLOOD"))
						ChangeFlag("NOBLOOD", true); //SetActorFlag("NOBLOOD", true);
				}
				else if(CheckFlag(0, "NOBLOOD"))
					ChangeFlag("NOBLOOD", false); //SetActorFlag(0, "NOBLOOD", false);
			}
		}
		
		SetActivator(-1);
		delay(1);
	}
}

script "CL_PLAYERTICKER" OPEN CLIENTSIDE
{
	int tickNum = 0;
	SetActivator(-1);

	while(1)
	{
		tickNum++;
		for(int p = 0; p < MAX_PLAYERS; p++)
		{
			if(!PlayerInGame(p))
				continue;

			SetActivatorToPlayer(p);

			if(GetActorProperty(0, APROP_Health) <= 0)
				continue;

			/////////////////////////////////////////////
			// Blinded Lightning Bolt Effect
			/////////////////////////////////////////////
			if(CheckInventory("Debuff_Blind"))
			{
				if(!(tickNum % 3))
					Spawn("Particle_Lightning7", GetActorX(0), GetActorY(0), GetActorZ(0) + 30.0, 0, 0);
			}

			// low health alarm
			if(GetActorProperty(0, APROP_Health) < 35)
			{
				if(!(tickNum % 70))
				{
					if(p_status[p].alarm_volume > 0.5)
						p_status[p].alarm_volume -= 0.1;

					PlayActorSound(0, SOUND_Bounce, CHAN_BODY, p_status[p].alarm_volume, false, 1.0);
				}
			}
			else
			{
				p_status[p].alarm_volume = 1.0;
			}
		}

		SetActivator(-1);
		delay(1);
	}
}