#library "SH_GlobalData"
#include "zcommon.acs"

#libdefine MAX_PLAYERS 64
#libdefine PICKUP_SPRITE_TAG 69069
#libdefine PINGMARKER_TEMP_HAX_TAG 666669
#libdefine PINGMARKER_BASE_TAG 78000
#libdefine PINGMARKER_LIGHT_BASE_TAG 79000

#libdefine ONE_SECOND 35
#libdefine ONE_MINUTE 2100
#libdefine ONE_HOUR 126000

#libdefine SHSKILL_VERYEASY 0
#libdefine SHSKILL_EASY 1
#libdefine SHSKILL_NORMAL 2
#libdefine SHSKILL_HARD 3
#libdefine SHSKILL_DEMONIC 4
#libdefine SHSKILL_NIGHTMARE 5
#libdefine SHSKILL_OKUPLOK 6

#libdefine INVUL_NONE 0
#libdefine INVUL_NORMAL 1
#libdefine INVUL_ULT 2

#libdefine STATUS_NONE		0
#libdefine STATUS_ACID		(1 << 1)
#libdefine STATUS_ICE		(1 << 2)
#libdefine STATUS_FROZEN	(1 << 3)
#libdefine STATUS_FIRE		(1 << 4)
#libdefine STATUS_ELECTRIC	(1 << 5)
#libdefine STATUS_METAL		(1 << 6)
#libdefine STATUS_VOID		(1 << 7)

#libdefine CLASS_FIEND 0
#libdefine CLASS_KUNAI 1
#libdefine CLASS_GOSIMER 2
#libdefine CLASS_MAX 3
#libdefine CLASS_STRIKER 4

struct vec2_t
{
	int x;
	int y;
};

struct vec3_t
{
	int x;
	int y;
	int z;
};

struct PlayerData_t
{
	vec3_t spawn;
	vec3_t dc_pos;
	int spawn_angle;
	int alarm_volume;
	int invul_type;
	int last_invul_type;
	int last_armor;
	int time_of_death;
	bool debuff_gravity;
};

global PlayerData_t 2:p_status[MAX_PLAYERS];

function bool startsWithVowel(str string)
{
	switch (GetChar(string, 0))
	{
		case 'a':
		case 'e':
		case 'i':
		case 'o':
		case 'u':
		case 'A':
		case 'E':
		case 'I':
		case 'O':
		case 'U':
			return true;
			break;
	}

	return false;
}

function int extract_red(int hex)
{
	return (hex >> 16) & 0xFF;
}

function int extract_green(int hex)
{
	return (hex >> 8) & 0xFF;
}

function int extract_blue(int hex)
{
	return (hex) & 0xFF;
}

function bool isBitSet(int bitfield, int bit)
{
	return !!(bitfield & (1 << bit));
}

function int min (int a, int b)
{
	if (a < b)
		return a;

	return b;
}

function int max (int a, int b)
{
	if (a > b)
		return a;

	return b;
}

function int abs (int x)
{
	if (x < 0)
		return -x;

	return x;
}

function int clamp(int in, int min, int max)
{
	int out = (in < min) ? min : in;
	return (out > max) ? max : out;
}

function int round_zan(int fixedNumber)
{
	return (fixedNumber + 0.5) >> 16;
}

function int VectorLength3D(int x, int y, int z)
{
	int len = VectorLength(x, y);
	len = VectorLength(z, len);
	return len;
}

function int GetDistance2D(vec2_t pos1, vec2_t pos2)
{
	int x = pos1.x - pos2.x;
	int y = pos1.y - pos2.y;
	
	return VectorLength(x, y);
}

function int GetDistance3D(vec3_t pos1, vec3_t pos2)
{
	int x = pos1.x - pos2.x;
	int y = pos1.y - pos2.y;
	int z = pos1.z - pos2.z;
	
	return VectorLength3D(x, y, z);
}

#libdefine SUBTRACT_OFFSET 1
#libdefine SCREEN_RATIO 2

function int get_widescreen_xoffset(int width, int height, int basex, int option)
{
	int scr_width = GetScreenWidth() << 16;
	int scr_height = GetScreenHeight() << 16;

	int x_difference = (FixedDiv(scr_width, scr_height) * height)-(width << 16);

	if(option == SUBTRACT_OFFSET)
	{
		return round_zan((basex << 16)-FixedDiv(x_difference, 2.0)) << 16;
	}
	else if (option == SCREEN_RATIO)
	{
		return round_zan((basex << 16)-x_difference) << 16;
	}

	return round_zan((basex << 16)+FixedDiv(x_difference, 2.0)) << 16;
}

function int seek_string(str string, str substring, int startPos)
{
	int stringLength = StrLen(string);
	int substringLength = StrLen(substring);
	int firstMatchPos = -1;
	int i,j;

	if(startPos < 0)
		return -1;

	for(i = startPos; i < stringLength; i++)
	{
		if(GetChar(string, i) != GetChar(substring, 0))
			continue;

		firstMatchPos = i;
		for(j = 0; j < substringLength; j++)
		{
			int char1 = GetChar(string, i+j);
			int char2 = GetChar(substring, j);
			if(char1 != char2)
				break;
		}

		if(j < substringLength)
			continue;

		return firstMatchPos;
	}

	return -1;
}

function str GetClassTag(str className)
{
	int uTID = UniqueTID();

	if(!SpawnForced(className, 0, 0, 0, uTID, 0))
		return className;

	str tag = GetActorProperty(uTID, APROP_NameTag);
	Thing_Remove(uTID);
	return tag;
}

function bool custom_checkactorstate_because_zandronum_sucks(int tid, str statename, bool exact)
{
	str className = GetActorClass(tid);

	int uTID = UniqueTID();

	if(!SpawnForced(className, 0, 0, 0, uTID, 0))
		return false;

	int hasState = SetActorState(uTID, statename, true);
	Thing_Remove(uTID);
	
	if(hasState)
		return true;
	
	return false;
}

// Original code by Isle - Modified by StrikerTheHedgefox.
// HudMessageOnActor will clobber the selected activator, so make sure to set the activator to the desired player afterwards if you need to do something else.
function void HudMessageOnActor(int tid, int msgID, int hudX, int hudY, int xOffset, int yOffset, int range, str sprite, str text, int holdTime, int colour) 
{		
	int dist, angle, vang, pitch, x, y;
	
	if (holdTime == 0) { holdTime = 0.1; }	
	if (hudX == 0) { hudX = 640; }
	if (hudY == 0) { hudY = 480; }
	
	SetActivatorToPlayer(ConsolePlayerNumber());
	SetHudSize(hudX, hudY, 1);
	if(StrIcmp(sprite, "None") != 0)
	{	
		SetFont(sprite);
		text = "A";		
	}
	
	if(SetActivator(0, AAPTR_PLAYER_GETCAMERA))
	{
		x = GetActorX(tid) - GetActorX(0);
		y = GetActorY(tid) - GetActorY(0);
		
		vang = VectorAngle(x,y);
		angle = (vang - GetActorAngle(0) + 1.0) % 1.0;
		
		if(((vang+0.125)%0.5) > 0.25) dist = FixedDiv(y, sin(vang));
		else dist = FixedDiv(x, cos(vang));
		
		if ((angle < 0.23 || angle > 0.85) && (dist >> 16) < range)
		{	
			if (GetActorPitch(0) >= -0.5 && GetActorPitch(0) <= 0.5)
			{
				pitch = VectorAngle(dist, GetActorZ(tid) - (GetActorZ(0) + GetActorViewHeight(0)));
				pitch += FixedMul(GetActorPitch(0), 1.2) % 1.0;
	
				//if ((hudX/2) * sin(angle) != 0 && cos(angle) != 0 && (hudX/2) * sin(pitch) != 0 && cos(pitch) != 0)
				{			
					x = hudX/2 - ((hudX/2) * sin(angle) / cos(angle));
					y = hudY/2 - ((HUDX/2) * sin(pitch) / cos(pitch));
					
					x+=xOffset;
					y+=yOffset;
					
					SetActivatorToPlayer(ConsolePlayerNumber());
					HudMessage(s:text; HUDMSG_PLAIN, msgID, colour, (x << 16)+((x < 0) ? -0.4 : 0.4), (y << 16), holdTime);	
				}	
			}	
		}
	}
}

// Imported from Korshun's ACSUtils, because Zandronum is an outdated piece of shit that doesn't seem
// to have basic, important functions that have existed since 2016.
function str ACSUtils_ChangeFlagName(str flag, bool value)
{
	return StrParam(s:"ACSUtils_CF_", s:flag, s:"_", d:(!!value));
}

function void ChangeFlag(str flag, bool value)
{
	GiveInventory(ACSUtils_ChangeFlagName(flag, value), 1);
}

function void ChangeActorFlag(int tid, str flag, bool value)
{
	GiveActorInventory(tid, ACSUtils_ChangeFlagName(flag, value), 1);
}

//=====================================
// INTEGER PACKING - Also from ACSUtils
//=====================================

// Pack unsigned 8-bit values. ========================================
function int PackBytes(int a, int b, int c, int d)
{
	return (a<<24) | (b<<16) | (c<<8) | d;
}
function int UnpackByte1(int x) { return (x>>24) & 0x000000FF; }
function int UnpackByte2(int x) { return (x>>16) & 0x000000FF; }
function int UnpackByte3(int x) { return (x>>8)  & 0x000000FF; }
function int UnpackByte4(int x) { return (x>>0)  & 0x000000FF; }


// Pack signed 16-bit values. =========================================
function int PackShorts(int a, int b)
{
	return ((a + 0x8000)<<16) | ((b + 0x8000) & 0x0000FFFF);
}
function int UnpackShort1(int x) { return ((x>>16) & 0x0000FFFF) - 0x8000; }
function int UnpackShort2(int x) { return ((x    ) & 0x0000FFFF) - 0x8000; }