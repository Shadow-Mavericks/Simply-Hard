#library "SH_GlobalData"
#include "zcommon.acs"

#libdefine MAX_PLAYERS 64
#libdefine PICKUP_SPRITE_TAG 69069

#libdefine SHSKILL_VERYEASY 0
#libdefine SHSKILL_EASY 1
#libdefine SHSKILL_NORMAL 2
#libdefine SHSKILL_HARD 3
#libdefine SHSKILL_DEMONIC 4
#libdefine SHSKILL_NIGHTMARE 5
#libdefine SHSKILL_OKUPLOK 6

#libdefine INVUL_NONE 0
#libdefine INVUL_NORMAL 1
#libdefine INVUL_ULT 2

#libdefine STATUS_NONE 0
#libdefine STATUS_ACID 1

struct vec2_t
{
	int x;
	int y;
};

struct vec3_t
{
	int x;
	int y;
	int z;
};

struct PlayerData_t
{
	int spawn_x;
	int spawn_y;
	int spawn_z;
	int spawn_angle;
	int alarm_volume;
	int invul_type;
	int last_invul_type;
	int time_of_death;
	bool debuff_gravity;
};

global PlayerData_t 2:p_status[MAX_PLAYERS];

function bool startsWithVowel(str string)
{
	switch (GetChar(string, 0))
	{
		case 'a':
		case 'e':
		case 'i':
		case 'o':
		case 'u':
		case 'A':
		case 'E':
		case 'I':
		case 'O':
		case 'U':
			return true;
			break;
	}

	return false;
}

function int min (int a, int b)
{
	if (a < b)
		return a;

	return b;
}

function int max (int a, int b)
{
	if (a > b)
		return a;

	return b;
}

function int abs (int x)
{
	if (x < 0)
		return -x;

	return x;
}

function int clamp(int in, int min, int max)
{
	int out = (in < min) ? min : in;
	return (out > max) ? max : out;
}

function int VectorLength3D(int x, int y, int z)
{
	int len = VectorLength(x, y);
	len = VectorLength(z, len);
	return len;
}

function int GetDistance2D(vec2_t pos1, vec2_t pos2)
{
	int x = pos1.x - pos2.x;
	int y = pos1.y - pos2.y;
	
	return VectorLength(x, y);
}

function int GetDistance3D(vec3_t pos1, vec3_t pos2)
{
	int x = pos1.x - pos2.x;
	int y = pos1.y - pos2.y;
	int z = pos1.z - pos2.z;
	
	return VectorLength3D(x, y, z);
}

function int seek_string(str string, str substring, int startPos)
{
	int stringLength = StrLen(string);
	int substringLength = StrLen(substring);
	int firstMatchPos = -1;
	int i,j;

	if(startPos < 0)
		return -1;

	for(i = startPos; i < stringLength; i++)
	{
		if(GetChar(string, i) != GetChar(substring, 0))
			continue;

		firstMatchPos = i;
		for(j = 0; j < substringLength; j++)
		{
			int char1 = GetChar(string, i+j);
			int char2 = GetChar(substring, j);
			if(char1 != char2)
				break;
		}

		if(j < substringLength)
			continue;

		return firstMatchPos;
	}

	return -1;
}

function str GetClassTag(str className)
{
	int uTID = UniqueTID();

	if(!SpawnForced(className, 0, 0, 0, uTID, 0))
		return className;

	str tag = GetActorProperty(uTID, APROP_NameTag);
	Thing_Remove(uTID);
	return tag;
}

// Imported from Korshun's ACSUtils, because Zandronum is an outdated piece of shit that doesn't seem
// to have basic, important functions that have existed since 2016.
function str ACSUtils_ChangeFlagName(str flag, bool value)
{
	return StrParam(s:"ACSUtils_CF_", s:flag, s:"_", d:(!!value));
}

function void ChangeFlag(str flag, bool value)
{
	GiveInventory(ACSUtils_ChangeFlagName(flag, value), 1);
}

function void ChangeActorFlag(int tid, str flag, bool value)
{
	GiveActorInventory(tid, ACSUtils_ChangeFlagName(flag, value), 1);
}