# HG changeset patch
# User StrikerTheHedgefox <mossj32@gmail.com>
# Date 1744957963 10800
#      Fri Apr 18 03:32:43 2025 -0300
# Node ID 17013ea1eae4ee3dc6ba535ef61f5f1fdc0f55b7
# Parent  e70a0b45601d0466be2a456b599e82d5c89ee74d
# EXP-Topic strikers_stuff
Fix CustomInventory items not executing their states on clients, if used by a non-player.

diff -r e70a0b45601d -r 17013ea1eae4 docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Fri Apr 18 03:21:12 2025 -0300
+++ b/docs/zandronum-history.txt	Fri Apr 18 03:32:43 2025 -0300
@@ -28,6 +28,7 @@
 +	- Added "hidelives = true/false" token to SBARINFO, allowing to disable the built-in lives display on the HUD. [StrikerTheHedgefox]
 +	- Backported A_WeaponOffset from ZDoom Revision 115dbd0, with alterations necessary for Zandronum's current codebase. [StrikerTheHedgefox]
 +	- Make DISCONNECT scripts set the activator to the player's pawn, like ZDoom does. [StrikerTheHedgefox]
+-	- Fix CustomInventory items not executing their use states on clients, if used by a non-player. [StrikerTheHedgefox]
 -	- Fix A_ChangeFlag not working on clientsided actors. [StrikerTheHedgefox]
 -	- Fix a crash that can occur when using the "colors" DECALDEF token, when the decal's image was in the "graphics" folder. [StrikerTheHedgefox]
 -	- Fix truncation of translation index in decals. [StrikerTheHedgefox]
diff -r e70a0b45601d -r 17013ea1eae4 protocolspec/spec.things.txt
--- a/protocolspec/spec.things.txt	Fri Apr 18 03:21:12 2025 -0300
+++ b/protocolspec/spec.things.txt	Fri Apr 18 03:32:43 2025 -0300
@@ -406,3 +406,8 @@
 	ExtendedCommand
 	Player player
 EndCommand
+
+Command ThingUsesCustomInventory
+	Actor usingThing
+	Class<ACustomInventory> itemType
+EndCommand
diff -r e70a0b45601d -r 17013ea1eae4 src/cl_main.cpp
--- a/src/cl_main.cpp	Fri Apr 18 03:21:12 2025 -0300
+++ b/src/cl_main.cpp	Fri Apr 18 03:32:43 2025 -0300
@@ -9553,6 +9553,46 @@
 }
 
 //*****************************************************************************
+// [JM]
+void ServerCommands::ThingUsesCustomInventory::Execute()
+{
+	// Try to find this object within the player's personal inventory.
+	ACustomInventory* item = static_cast<ACustomInventory*>(usingThing->FindInventory(itemType));
+
+	// If the player doesn't have this type, give it to him.
+	if (item == NULL)
+		item = static_cast<ACustomInventory*>(usingThing->GiveInventoryType(itemType));
+
+	// If he still doesn't have the object after trying to give it to him... then YIKES!
+	if (item == NULL)
+	{
+		CLIENT_PrintWarning("client_ThingUsesCustomInventory: Failed to give inventory type, %s!\n", itemType->TypeName.GetChars());
+		return;
+	}
+
+	if (item->Owner == NULL) // [JM] For some buttfucking reason, this happens. Not a clue why.
+		item->Owner = usingThing; // So force the owner to this.
+
+	// Finally, use the item.
+	const bool success = item->Use(false);
+
+	// [BB] The server only instructs the client to use the item, if the use was successful.
+	// So using it on the client also should be successful. If it is not, something went wrong,
+	// e.g. the use has a A_JumpIfHealthLower(100,"Success") check and a successful use heals the
+	// player such that the check will fail after the item was used. Since the server informs the
+	// client about the effects of the use before it tells the client to use the item, the use
+	// on the client will fail. In this case at least reduce the inventory amount according to a
+	// successful use.
+	if ((success == false) && !(dmflags2 & DF2_INFINITE_INVENTORY))
+	{
+		if (--item->Amount <= 0 && !(item->ItemFlags & IF_KEEPDEPLETED))
+		{
+			item->Destroy();
+		}
+	}
+}
+
+//*****************************************************************************
 // [TRSR]
 void ServerCommands::SetDominationPointOwner::Execute()
 {
diff -r e70a0b45601d -r 17013ea1eae4 src/g_shared/a_pickups.cpp
--- a/src/g_shared/a_pickups.cpp	Fri Apr 18 03:21:12 2025 -0300
+++ b/src/g_shared/a_pickups.cpp	Fri Apr 18 03:32:43 2025 -0300
@@ -1826,6 +1826,14 @@
 
 bool ACustomInventory::Use (bool pickup)
 {
+	if (NETWORK_GetState() == NETSTATE_SERVER)
+	{
+		if (Owner && !Owner->player)
+		{
+			SERVERCOMMANDS_ThingUsesCustomInventory(Owner, this);
+		}
+	}
+
 	return CallStateChain (Owner, FindState(NAME_Use));
 }
 
diff -r e70a0b45601d -r 17013ea1eae4 src/network_enums.h
--- a/src/network_enums.h	Fri Apr 18 03:21:12 2025 -0300
+++ b/src/network_enums.h	Fri Apr 18 03:32:43 2025 -0300
@@ -308,6 +308,7 @@
 	ENUM_ELEMENT ( SVC_DOPUSHER ),
 	ENUM_ELEMENT ( SVC_ADJUSTPUSHER ),
 	ENUM_ELEMENT ( SVC_ANNOUNCERSOUND ),
+	ENUM_ELEMENT ( SVC_THINGUSESCUSTOMINVENTORY ),
 	ENUM_ELEMENT ( SVC_EXTENDEDCOMMAND ),
 
 	ENUM_ELEMENT ( NUM_SERVER_COMMANDS ),
diff -r e70a0b45601d -r 17013ea1eae4 src/sv_commands.cpp
--- a/src/sv_commands.cpp	Fri Apr 18 03:21:12 2025 -0300
+++ b/src/sv_commands.cpp	Fri Apr 18 03:32:43 2025 -0300
@@ -5496,6 +5496,19 @@
 }
 
 //*****************************************************************************
+// [JM]
+void SERVERCOMMANDS_ThingUsesCustomInventory(AActor* pActor, ACustomInventory* pItem)
+{
+	if (!EnsureActorHasNetID(pActor))
+		return;
+
+	ServerCommands::ThingUsesCustomInventory command;
+	command.SetUsingThing(pActor);
+	command.SetItemType(pItem->GetClass());
+	command.sendCommandToClients();
+}
+
+//*****************************************************************************
 void APathFollower::SyncWithClient ( const ULONG ulClient )
 {
 	if ( !EnsureActorHasNetID (this) )
diff -r e70a0b45601d -r 17013ea1eae4 src/sv_commands.h
--- a/src/sv_commands.h	Fri Apr 18 03:21:12 2025 -0300
+++ b/src/sv_commands.h	Fri Apr 18 03:32:43 2025 -0300
@@ -199,6 +199,7 @@
 void	SERVERCOMMANDS_UpdateThingScaleNotAtDefault( AActor* pActor, ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );
 void	SERVERCOMMANDS_FlashStealthMonster( AActor* pActor, SBYTE direction, ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );
 void	SERVERCOMMANDS_StopAllSoundsOnThing( AActor* pActor, ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );
+void	SERVERCOMMANDS_ThingUsesCustomInventory(AActor* pActor, ACustomInventory* pItem);
 
 // Print commands. These print some sort of message to the screen.
 void	SERVERCOMMANDS_Print( const char *pszString, ULONG ulPrintLevel, ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );
