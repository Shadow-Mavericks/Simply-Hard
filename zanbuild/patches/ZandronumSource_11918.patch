# HG changeset patch
# User StrikerTheHedgefox <mossj32@gmail.com>
# Date 1744152486 10800
#      Tue Apr 08 19:48:06 2025 -0300
# Node ID 5bc4d465b4c3043237af68a0a5a1f3ea3227b68f
# Parent  480ea3e0b85a7124a82bed1761026463bf8a865d
# EXP-Topic strikers_stuff
Add DECALUSESSPRITESCALE actor flag, which multiplies the decal scale by the actor's sprite scale. Also refactor my previous code a bit.

diff -r 480ea3e0b85a -r 5bc4d465b4c3 docs/zandronum-history.txt
--- a/docs/zandronum-history.txt	Fri Apr 04 07:35:22 2025 -0300
+++ b/docs/zandronum-history.txt	Tue Apr 08 19:48:06 2025 -0300
@@ -14,6 +14,7 @@
 3.3
 ---
 *+	- Added +DECALUSESTRANSLATION, allowing an actor to pass its translation down to its decal. Useful to change decal color on the fly, or to pass the color of blood particles down to the decal. Pal index 255 is used set the color for shaded decals. [StrikerTheHedgefox]
+*+	- Added +DECALUSESSPRITESCALE, which multiplies an actor's decal scale by the sprite scale. [StrikerTheHedgefox]
 *+	- FakeInventory actors can now make use of the "Activation" thing property, vastly increasing its utility. Allows the item to target the player collecting the item and vice/versa, or for the item itself to be the activator. [StrikerTheHedgefox]
 *-	- Send inventory that inherits from CustomInventory and Inventory on full update. Fixes issues where weapon checks for inventory fails for late-joining clients, or after a map change. [StrikerTheHedgefox]
 +	- Added A_JumpTo codepointer, which jumps to a state instantly & with prediction. Useful for jumping to an ancestor actor's state without the issues A_Jump with a 256 chance has. [StrikerTheHedgefox]
diff -r 480ea3e0b85a -r 5bc4d465b4c3 src/actor.h
--- a/src/actor.h	Fri Apr 04 07:35:22 2025 -0300
+++ b/src/actor.h	Tue Apr 08 19:48:06 2025 -0300
@@ -485,6 +485,7 @@
 
 // [JM] StrikerTheHedgefox's flags
 	HFXF_DECALUSESTRANSLATION		= (1 << 0), // Decal will use actor's translation, or use the translation's pal index 255 color as the basis of its shade if untranslatable.
+	HFXF_DECALUSESSPRITESCALE		= (1 << 1), // Decal's scale will be multiplied by actor's sprite scale.
 
 // --- mobj.renderflags ---
 
diff -r 480ea3e0b85a -r 5bc4d465b4c3 src/decallib.cpp
--- a/src/decallib.cpp	Fri Apr 04 07:35:22 2025 -0300
+++ b/src/decallib.cpp	Tue Apr 08 19:48:06 2025 -0300
@@ -1043,8 +1043,8 @@
 		decal->SetShade (ShadeColor);
 	}
 	decal->Translation = Translation;
-	decal->ScaleX = ScaleX;
-	decal->ScaleY = ScaleY;
+	decal->ScaleX = FixedMul(ScaleX, decal->ScaleMultX);
+	decal->ScaleY = FixedMul(ScaleY, decal->ScaleMultY);
 	decal->PicNum = PicNum;
 	decal->Alpha = Alpha << 1;
 	decal->RenderStyle = RenderStyle;
@@ -1223,7 +1223,7 @@
 
 	if (GoalX >= 0)
 	{
-		thinker->GoalX = GoalX;
+		thinker->GoalX = FixedMul(GoalX, actor->ScaleMultX); // [JM] Apply multiplier to goal
 		thinker->bStretchX = true;
 	}
 	else
@@ -1232,7 +1232,7 @@
 	}
 	if (GoalY >= 0)
 	{
-		thinker->GoalY = GoalY;
+		thinker->GoalY = FixedMul(GoalY, actor->ScaleMultY); // [JM] Apply multiplier to goal
 		thinker->bStretchY = true;
 	}
 	else
@@ -1307,7 +1307,7 @@
 	thinker->TimeToStart = level.maptime + SlideStart;
 	thinker->TimeToStop = thinker->TimeToStart + SlideTime;
 	/*thinker->DistX = DistX;*/
-	thinker->DistY = DistY;
+	thinker->DistY = FixedMul(DistY, actor->ScaleMultY); // [JM] Apply scale multiplier to Y distance.
 	thinker->bStarted = false;
 	return thinker;
 }
diff -r 480ea3e0b85a -r 5bc4d465b4c3 src/g_shared/a_decals.cpp
--- a/src/g_shared/a_decals.cpp	Fri Apr 04 07:35:22 2025 -0300
+++ b/src/g_shared/a_decals.cpp	Tue Apr 08 19:48:06 2025 -0300
@@ -68,6 +68,7 @@
   AlphaColor(0), Translation(0), RenderFlags(0)
 {
 	RenderStyle = STYLE_None;
+	ScaleMultX = ScaleMultY = FRACUNIT; // [JM]
 	PicNum.SetInvalid();
 }
 
@@ -77,6 +78,7 @@
   AlphaColor(0), Translation(0), RenderFlags(0)
 {
 	RenderStyle = STYLE_None;
+	ScaleMultX = ScaleMultY = FRACUNIT; // [JM]
 	PicNum.SetInvalid();
 }
 
@@ -86,6 +88,7 @@
   AlphaColor(0), Translation(0), RenderFlags(0)
 {
 	RenderStyle = STYLE_None;
+	ScaleMultX = ScaleMultY = FRACUNIT; // [JM]
 	PicNum.SetInvalid();
 }
 
@@ -95,6 +98,7 @@
   Alpha(basis->alpha), AlphaColor(basis->fillcolor), Translation(basis->Translation), PicNum(basis->picnum),
   RenderFlags(basis->renderflags), RenderStyle(basis->RenderStyle)
 {
+	ScaleMultX = ScaleMultY = FRACUNIT; // [JM]
 }
 
 DBaseDecal::DBaseDecal (const DBaseDecal *basis)
@@ -103,6 +107,7 @@
   ScaleY(basis->ScaleY), Alpha(basis->Alpha), AlphaColor(basis->AlphaColor), Translation(basis->Translation),
   PicNum(basis->PicNum), RenderFlags(basis->RenderFlags), RenderStyle(basis->RenderStyle)
 {
+	ScaleMultX = ScaleMultY = FRACUNIT; // [JM]
 }
 
 void DBaseDecal::Destroy ()
@@ -133,7 +138,8 @@
 		<< PicNum
 		<< RenderFlags
 		<< RenderStyle
-		<< Sector;
+		<< Sector
+		<< ScaleMultX << ScaleMultY; // [JM]
 }
 
 void DBaseDecal::SerializeChain (FArchive &arc, DBaseDecal **first)
@@ -557,6 +563,10 @@
 	{
 		if (decal->StickToWall (wall, ix, iy, ffloor).isValid())
 		{
+			// [JM] Set scale multiplier before applying template.
+			decal->ScaleMultX = ScaleMultX;
+			decal->ScaleMultY = ScaleMultY;
+
 			tpl->ApplyToDecal (decal, wall);
 			decal->AlphaColor = AlphaColor;
 			decal->RenderFlags = (decal->RenderFlags & RF_DECALMASK) |
@@ -660,7 +670,7 @@
 	}
 }
 
-DImpactDecal *DImpactDecal::StaticCreate (const char *name, fixed_t x, fixed_t y, fixed_t z, side_t *wall, F3DFloor * ffloor, PalEntry color, int32_t translation)
+DImpactDecal *DImpactDecal::StaticCreate (const char *name, fixed_t x, fixed_t y, fixed_t z, side_t *wall, F3DFloor * ffloor, PalEntry color, int32_t translation, fixed_t scalemultx, fixed_t scalemulty)
 {
 	if (cl_maxdecals > 0)
 	{
@@ -668,13 +678,13 @@
 
 		if (tpl != NULL && (tpl = tpl->GetDecal()) != NULL)
 		{
-			return StaticCreate (tpl, x, y, z, wall, ffloor, color, translation);
+			return StaticCreate (tpl, x, y, z, wall, ffloor, color, translation, scalemultx, scalemulty);
 		}
 	}
 	return NULL;
 }
 
-DImpactDecal *DImpactDecal::StaticCreate (const FDecalTemplate *tpl, fixed_t x, fixed_t y, fixed_t z, side_t *wall, F3DFloor * ffloor, PalEntry color, int32_t translation)
+DImpactDecal *DImpactDecal::StaticCreate (const FDecalTemplate *tpl, fixed_t x, fixed_t y, fixed_t z, side_t *wall, F3DFloor * ffloor, PalEntry color, int32_t translation, fixed_t scalemultx, fixed_t scalemulty)
 {
 	DImpactDecal *decal = NULL;
 	if (tpl != NULL && cl_maxdecals > 0 && !(wall->Flags & WALLF_NOAUTODECALS))
@@ -688,7 +698,7 @@
 			// apply the custom color as well.
 			if (tpl->ShadeColor != tpl_low->ShadeColor) lowercolor=0;
 			else lowercolor = color;
-			StaticCreate (tpl_low, x, y, z, wall, ffloor, lowercolor, translation);
+			StaticCreate (tpl_low, x, y, z, wall, ffloor, lowercolor, translation, scalemultx, scalemulty);
 		}
 		DImpactDecal::CheckMax();
 		decal = new DImpactDecal (z);
@@ -702,6 +712,10 @@
 			return NULL;
 		}
 
+		// [JM] Set scale multiplier before applying template.
+		decal->ScaleMultX = scalemultx;
+		decal->ScaleMultY = scalemulty;
+
 		tpl->ApplyToDecal (decal, wall);
 		if (color != 0)
 		{
@@ -735,6 +749,10 @@
 	{
 		if (decal->StickToWall (wall, ix, iy, ffloor).isValid())
 		{
+			// [JM] Set scale multiplier before applying template.
+			decal->ScaleMultX = ScaleMultX;
+			decal->ScaleMultY = ScaleMultY;
+
 			tpl->ApplyToDecal (decal, wall);
 			decal->AlphaColor = AlphaColor;
 			decal->RenderFlags = (decal->RenderFlags & RF_DECALMASK) |
diff -r 480ea3e0b85a -r 5bc4d465b4c3 src/g_shared/a_sharedglobal.h
--- a/src/g_shared/a_sharedglobal.h	Fri Apr 04 07:35:22 2025 -0300
+++ b/src/g_shared/a_sharedglobal.h	Tue Apr 08 19:48:06 2025 -0300
@@ -41,6 +41,7 @@
 	fixed_t LeftDistance;
 	fixed_t Z;
 	fixed_t ScaleX, ScaleY;
+	fixed_t ScaleMultX, ScaleMultY; // [JM]
 	fixed_t Alpha;
 	DWORD AlphaColor;
 	int Translation;
@@ -65,8 +66,8 @@
 	DImpactDecal (fixed_t z);
 	DImpactDecal (side_t *wall, const FDecalTemplate *templ);
 
-	static DImpactDecal *StaticCreate (const char *name, fixed_t x, fixed_t y, fixed_t z, side_t *wall, F3DFloor * ffloor, PalEntry color=0, int32_t translation=0); // [JM] Added translation param
-	static DImpactDecal *StaticCreate (const FDecalTemplate *tpl, fixed_t x, fixed_t y, fixed_t z, side_t *wall, F3DFloor * ffloor, PalEntry color=0, int32_t translation=0); // [JM] Added translation param
+	static DImpactDecal *StaticCreate (const char *name, fixed_t x, fixed_t y, fixed_t z, side_t *wall, F3DFloor * ffloor, PalEntry color=0, int32_t translation=0, fixed_t scalemultx = FRACUNIT, fixed_t scalemulty = FRACUNIT); // [JM] Added translation and scalemultx/y params
+	static DImpactDecal *StaticCreate (const FDecalTemplate *tpl, fixed_t x, fixed_t y, fixed_t z, side_t *wall, F3DFloor * ffloor, PalEntry color=0, int32_t translation=0, fixed_t scalemultx = FRACUNIT, fixed_t scalemulty = FRACUNIT); // [JM] Added translation and scalemultx/y params
 
 	void BeginPlay ();
 	void Destroy ();
diff -r 480ea3e0b85a -r 5bc4d465b4c3 src/p_mobj.cpp
--- a/src/p_mobj.cpp	Fri Apr 04 07:35:22 2025 -0300
+++ b/src/p_mobj.cpp	Tue Apr 08 19:48:06 2025 -0300
@@ -1644,26 +1644,28 @@
 					// [BC] Servers don't need to spawn decals.
 					if ( NETWORK_GetState( ) != NETSTATE_SERVER )
 					{
+						fixed_t decalScaleX = FRACUNIT;
+						fixed_t decalScaleY = FRACUNIT;
+						PalEntry color = 0;
+						int32_t translation = 0;
+
 						if (mo->HFXFlags & HFXF_DECALUSESTRANSLATION) // [JM] Transfer actor's translation to the decal.
 						{
-							FRemapTable* table = TranslationToTable(mo->Translation);
+							translation = mo->Translation;
+							FRemapTable* table = TranslationToTable(translation);
 							if (table != NULL)
 							{
 								PalEntry color = table->Palette[255]; // Use index 255 for shaded decals.
-								DImpactDecal::StaticCreate(base->GetDecal(),
-														   x, y, z, line->sidedef[side], ffloor, color, mo->Translation);
-							}
-							else
-							{
-								DImpactDecal::StaticCreate(base->GetDecal(),
-														   x, y, z, line->sidedef[side], ffloor);
 							}
 						}
-						else
+						if (mo->HFXFlags & HFXF_DECALUSESSPRITESCALE)
 						{
-							DImpactDecal::StaticCreate(base->GetDecal(),
-													   x, y, z, line->sidedef[side], ffloor);
+							decalScaleX = mo->scaleX;
+							decalScaleY = mo->scaleY;
 						}
+
+						DImpactDecal::StaticCreate(base->GetDecal(),
+												   x, y, z, line->sidedef[side], ffloor, color, translation, decalScaleX, decalScaleY);
 					}
 				}
 			}
diff -r 480ea3e0b85a -r 5bc4d465b4c3 src/thingdef/thingdef_data.cpp
--- a/src/thingdef/thingdef_data.cpp	Fri Apr 04 07:35:22 2025 -0300
+++ b/src/thingdef/thingdef_data.cpp	Tue Apr 08 19:48:06 2025 -0300
@@ -277,6 +277,7 @@
 
 	// [JM] Striker's Flags
 	DEFINE_FLAG(HFXF, DECALUSESTRANSLATION, AActor, HFXFlags),
+	DEFINE_FLAG(HFXF, DECALUSESSPRITESCALE, AActor, HFXFlags),
 
 	// [BB] New DECORATE network related flag defines here.
 	DEFINE_FLAG(NETFL, NONETID, AActor, NetworkFlags),
