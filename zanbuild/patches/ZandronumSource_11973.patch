# HG changeset patch
# User Jordon Moss <mossj32@gmail.com>
# Date 1748747189 10800
#      Sun Jun 01 00:06:29 2025 -0300
# Node ID 6cd1ae47a34fa3362321e4b129daa8c66c875cc1
# Parent  23057c3943ce06965b84c62a44f0650d157eeb19
# EXP-Topic strikers_stuff
Initial implementation of Get/Set/FindMapData. Only for sectors currently, some things are missing networking.

diff -r 23057c3943ce -r 6cd1ae47a34f protocolspec/spec.sectors.txt
--- a/protocolspec/spec.sectors.txt	Sat Apr 26 01:15:17 2025 -0300
+++ b/protocolspec/spec.sectors.txt	Sun Jun 01 00:06:29 2025 -0300
@@ -27,6 +27,11 @@
 	Short lightLevel
 EndCommand
 
+Command SetSectorTag
+	Sector sector
+	Short tag
+EndCommand
+
 Command SetSectorColor
 	Sector sector
 	Byte red
diff -r 23057c3943ce -r 6cd1ae47a34f src/cl_main.cpp
--- a/src/cl_main.cpp	Sat Apr 26 01:15:17 2025 -0300
+++ b/src/cl_main.cpp	Sun Jun 01 00:06:29 2025 -0300
@@ -6619,6 +6619,13 @@
 }
 
 //*****************************************************************************
+// [JM]
+void ServerCommands::SetSectorTag::Execute()
+{
+	ChangeSectorTag(sector - sectors, tag);
+}
+
+//*****************************************************************************
 //
 void ServerCommands::SetSectorColor::Execute()
 {
diff -r 23057c3943ce -r 6cd1ae47a34f src/g_game.cpp
--- a/src/g_game.cpp	Sat Apr 26 01:15:17 2025 -0300
+++ b/src/g_game.cpp	Sun Jun 01 00:06:29 2025 -0300
@@ -3683,6 +3683,14 @@
 				SERVERCOMMANDS_SetSectorLightLevel( ulIdx );
 		}
 
+		if (sectors[ulIdx].tag != sectors[ulIdx].SavedTag)
+		{
+			ChangeSectorTag(ulIdx, sectors[ulIdx].SavedTag);
+
+			if (NETWORK_GetState() == NETSTATE_SERVER)
+				SERVERCOMMANDS_SetSectorTag(ulIdx);
+		}
+
 		if ( sectors[ulIdx].ColorMap != sectors[ulIdx].SavedColorMap )
 		{
 			sectors[ulIdx].ColorMap = sectors[ulIdx].SavedColorMap;
diff -r 23057c3943ce -r 6cd1ae47a34f src/network_enums.h
--- a/src/network_enums.h	Sat Apr 26 01:15:17 2025 -0300
+++ b/src/network_enums.h	Sun Jun 01 00:06:29 2025 -0300
@@ -309,6 +309,7 @@
 	ENUM_ELEMENT ( SVC_ADJUSTPUSHER ),
 	ENUM_ELEMENT ( SVC_ANNOUNCERSOUND ),
 	ENUM_ELEMENT ( SVC_THINGUSESCUSTOMINVENTORY ),
+	ENUM_ELEMENT ( SVC_SETSECTORTAG ),
 	ENUM_ELEMENT ( SVC_EXTENDEDCOMMAND ),
 
 	ENUM_ELEMENT ( NUM_SERVER_COMMANDS ),
diff -r 23057c3943ce -r 6cd1ae47a34f src/p_acs.cpp
--- a/src/p_acs.cpp	Sat Apr 26 01:15:17 2025 -0300
+++ b/src/p_acs.cpp	Sun Jun 01 00:06:29 2025 -0300
@@ -5589,12 +5589,62 @@
 	ASCF_SetControlPointInfo,
 	ASCF_GetSkinProperty, // [TRSR]
 	ACSF_IsPlayerContestingControlPoint,
+	ACSF_GetMapData = 197, // [JM] int(int index, int dataType, int property)
+	ACSF_SetMapData = 198, // [JM] int(int index, int dataType, int property, int value)
+	ACSF_FindMapData = 199, // [JM] int(int index, int dataType, int property, int value)
 
 	// ZDaemon
 	ACSF_GetTeamScore = 19620,	// (int team)
 	ACSF_SetTeamScore,			// (int team, int value)
 };
 
+enum MapDataTypes
+{
+	MDATA_Sector,
+	MDATA_Line,
+};
+
+enum MapDataSectorProperties
+{
+	SECTProp_Special,				// Sector->Special
+	SECTProp_Tag,					// Sector->tag
+	SECTProp_LightLevel,			// Sector->lightlevel
+	SECTProp_Gravity,				// Sector->gravity
+	SECTProp_Damage,				// Sector->damage
+	SECTProp_MeansOfDeath,			// Sector->mod
+	SECTProp_FloorHeight,			// Sector->floorplane.d
+	SECTProp_CeilingHeight,			// Sector->ceilingplane.d
+	SECTProp_FloorTexture,			// TexMan[Sector->planes[0].Texture]->Name
+	SECTProp_CeilingTexture,		// TexMan[Sector->planes[1].Texture]->Name
+	SECTProp_SeqType,				// Sector->seqType
+	SECTProp_SeqName,				// Sector->seqName
+	SECTProp_Sky,					// Sector->sky
+	SECTProp_SoundOriginX,			// Sector->soundorg[0]
+	SECTProp_SoundOriginY,			// Sector->soundorg[1]
+	SECTProp_FloorReflection,		// Sector->reflect[0]
+	SECTProp_CeilingReflection,		// Sector->reflect[1]
+	SECTProp_LineCount,				// Sector->linecount
+	SECTProp_SectorLineIndex,		// Sector->lines[value] - lines?
+	SECTProp_FloorXOffset,			// Sector->planes[0].xform.xoffs
+	SECTProp_CeilingXOffset,		// Sector->planes[1].xform.xoffs
+	SECTProp_FloorYOffset,			// Sector->planes[0].xform.yoffs
+	SECTProp_CeilingYOffset,		// Sector->planes[1].xform.yoffs
+	SECTProp_FloorXScale,			// Sector->planes[0].xform.xscale
+	SECTProp_CeilingXScale,			// Sector->planes[1].xform.xscale
+	SECTProp_FloorYScale,			// Sector->planes[0].xform.yscale
+	SECTProp_CeilingYScale,			// Sector->planes[1].xform.yscale
+	SECTProp_FloorAngle,			// Sector->planes[0].xform.angle
+	SECTProp_CeilingAngle,			// Sector->planes[1].xform.angle
+	SECTProp_FloorBaseAngle,		// Sector->planes[0].xform.base_angle
+	SECTProp_CeilingBaseAngle,		// Sector->planes[1].xform.base_angle
+	SECTProp_FloorBaseYOffset,		// Sector->planes[0].xform.base_yoffs
+	SECTProp_CeilingBaseYOffset,	// Sector->planes[1].xform.base_yoffs
+	SECTProp_FloorAlpha,			// Sector->planes[0].alpha
+	SECTProp_CeilingAlpha,			// Sector->planes[1].alpha
+	SECTProp_FloorLight,			// Sector->planes[0].Light
+	SECTProp_CeilingLight,			// Sector->planes[1].Light
+};
+
 int DLevelScript::SideFromID(int id, int side)
 {
 	if (side != 0 && side != 1) return -1;
@@ -8938,6 +8988,728 @@
 			break;
 		}
 
+		case ACSF_GetMapData: // [JM] int(int index, int dataType, int property)
+		case ACSF_SetMapData: // [JM] int(int index, int dataType, int property, int value)
+		case ACSF_FindMapData: // [JM] int(int index, int dataType, int property, int value)
+		{
+			int index = args[0];
+			int dataType = args[1];
+			int property = args[2];
+			int value = args[3];
+
+			if (dataType == MDATA_Sector)
+			{
+				sector_t* Sector = &sectors[index];
+				if (index < 0 || index > numsectors)
+					return -1;
+
+				switch (property)
+				{
+					case SECTProp_FloorTexture:
+					case SECTProp_CeilingTexture:
+					{
+						int plane = (property == SECTProp_FloorTexture) ? sector_t::floor : sector_t::ceiling;
+
+						if (funcIndex == ACSF_GetMapData)
+							return GlobalACSStrings.AddString(TexMan[Sector->planes[plane].Texture]->Name);
+
+						if (funcIndex == ACSF_SetMapData)
+						{
+							const char* flatname = FBehavior::StaticLookupString(value);
+
+							if (flatname == NULL)
+								return -1;
+
+							FTextureID flat = TexMan.GetTexture(flatname, FTexture::TEX_Flat, FTextureManager::TEXMAN_Overridable);
+							Sector->SetTexture(plane, flat);
+							if (NETWORK_GetState() == NETSTATE_SERVER)
+								SERVERCOMMANDS_SetSectorFlat(index);
+
+							Sector->bFlatChange = true; // Mark change
+							return 1;
+						}
+
+						if (funcIndex == ACSF_FindMapData)
+						{
+							const char* flatname = FBehavior::StaticLookupString(value);
+							for (int i = index; i < numsectors; i++)
+							{
+								if (!stricmp(flatname, TexMan[sectors[i].planes[plane].Texture]->Name))
+									return i;
+							}
+						}
+
+						return -1;
+					}
+
+					case SECTProp_FloorHeight:
+					case SECTProp_CeilingHeight:
+					{
+						int plane = (property == SECTProp_FloorHeight) ? sector_t::floor : sector_t::ceiling;
+
+						if (funcIndex == ACSF_GetMapData)
+							return (plane) ? Sector->ceilingplane.d : Sector->floorplane.d;
+
+						if (funcIndex == ACSF_SetMapData)
+						{
+							if ((plane == sector_t::ceiling) && (value < Sector->floorplane.d))
+								value = Sector->floorplane.d;
+							else if ((plane == sector_t::floor) && (value > Sector->ceilingplane.d))
+								value = Sector->ceilingplane.d;
+
+							fixed_t curpos = (plane == sector_t::ceiling) ? Sector->ceilingplane.d : Sector->floorplane.d;
+							fixed_t diff = (plane == sector_t::ceiling) ? Sector->ceilingplane.HeightDiff(curpos, value) : Sector->floorplane.HeightDiff(curpos, value);
+
+							if (diff != 0)
+							{
+								if (plane == sector_t::ceiling)
+								{
+									Sector->ceilingplane.d = -value;
+									Sector->bCeilingHeightChange = true;
+								}
+								else
+								{
+									Sector->floorplane.d = -value;
+									Sector->bFloorHeightChange = true;
+									Sector->AdjustFloorClip();
+								}
+		
+								P_ChangeSector(Sector, 0, diff, plane, false);
+								Sector->ChangePlaneTexZ(plane, diff);
+							}
+				
+							return diff;
+						}
+
+						if (funcIndex == ACSF_FindMapData)
+						{
+							for (int i = index; i < numsectors; i++)
+							{
+								int plane_z = (plane == sector_t::ceiling) ? sectors[i].ceilingplane.d : sectors[i].floorplane.d;
+								if (plane_z == value)
+									return i;
+							}
+						}
+
+						return -1;
+					}
+
+					case SECTProp_SoundOriginX:
+					case SECTProp_SoundOriginY:
+					{
+						int xory = (property == SECTProp_SoundOriginX) ? 0 : 1;
+						if (funcIndex == ACSF_GetMapData)
+							return Sector->soundorg[xory];
+
+						if (funcIndex == ACSF_SetMapData)
+						{
+							Sector->soundorg[xory] = value;
+							return 1;
+						}
+
+						if (funcIndex == ACSF_FindMapData)
+						{
+							for (int i = index; i < numsectors; i++)
+							{
+								if (sectors[i].soundorg[xory] == value)
+									return i;
+							}
+						}
+
+						return -1;
+					}
+
+					case SECTProp_Tag:
+					{
+						if (funcIndex == ACSF_GetMapData)
+							return Sector->tag;
+						
+						if (funcIndex == ACSF_SetMapData)
+						{
+							ChangeSectorTag(index, value);
+
+							if (NETWORK_GetState() == NETSTATE_SERVER)
+								SERVERCOMMANDS_SetSectorTag(index);
+							return 1;
+						}
+
+						if (funcIndex == ACSF_FindMapData)
+						{
+							for (int i = index; i < numsectors; i++)
+							{
+								if (sectors[i].tag == value)
+									return i;
+							}
+						}
+
+						return -1;
+					}
+
+					case SECTProp_FloorReflection:
+					case SECTProp_CeilingReflection:
+					{
+						int plane = (property == SECTProp_FloorReflection) ? sector_t::floor : sector_t::ceiling;
+
+						if (funcIndex == ACSF_GetMapData)
+							return FLOAT2FIXED(Sector->reflect[plane]);
+
+						if (funcIndex == ACSF_SetMapData)
+						{
+							Sector->reflect[plane] = FIXED2FLOAT(value);
+
+							if (NETWORK_GetState() == NETSTATE_SERVER)
+								SERVERCOMMANDS_SetSectorReflection(index);
+							return 1;
+						}
+
+						if (funcIndex == ACSF_FindMapData)
+						{
+							float valueFloat = FIXED2FLOAT(value);
+							for (int i = index; i < numsectors; i++)
+							{
+								if (sectors[i].reflect[plane] == valueFloat)
+									return i;
+							}
+						}
+
+						return -1;
+					}
+
+					case SECTProp_Special:			// Sector->Special
+					{
+						if (funcIndex == ACSF_GetMapData)
+							return Sector->special;
+
+						if (funcIndex == ACSF_SetMapData)
+						{
+							Sector->special = value;
+
+							if (NETWORK_GetState() == NETSTATE_SERVER)
+								SERVERCOMMANDS_SetSectorSpecial(index);
+							return 1;
+						}
+
+						if (funcIndex == ACSF_FindMapData)
+						{
+							for (int i = index; i < numsectors; i++)
+							{
+								if (sectors[i].special == value)
+									return i;
+							}
+						}
+
+						return -1;
+					}
+
+					case SECTProp_LightLevel:		// Sector->lightlevel
+					{
+						if (funcIndex == ACSF_GetMapData)
+							return Sector->lightlevel;
+
+						if (funcIndex == ACSF_SetMapData)
+						{
+							Sector->SetLightLevel(value);
+							Sector->bLightChange = true;
+
+							if (NETWORK_GetState() == NETSTATE_SERVER)
+								SERVERCOMMANDS_SetSectorLightLevel(index);
+							return 1;
+						}
+
+						if (funcIndex == ACSF_FindMapData)
+						{
+							for (int i = index; i < numsectors; i++)
+							{
+								if (sectors[i].lightlevel == value)
+									return i;
+							}
+						}
+
+						return -1;
+					}
+
+					case SECTProp_Gravity:			// Sector->gravity
+					{
+						if (funcIndex == ACSF_GetMapData)
+							return FLOAT2FIXED(Sector->gravity);
+
+						if (funcIndex == ACSF_SetMapData)
+						{
+							Sector->gravity = FIXED2FLOAT(value);
+
+							if (NETWORK_GetState() == NETSTATE_SERVER)
+								SERVERCOMMANDS_SetSectorGravity(index);
+							return 1;
+						}
+
+						if (funcIndex == ACSF_FindMapData)
+						{
+							float valueFloat = FIXED2FLOAT(value);
+							for (int i = index; i < numsectors; i++)
+							{
+								if (sectors[i].gravity == valueFloat)
+									return i;
+							}
+						}
+
+						return -1;
+					}
+
+					case SECTProp_Damage:			// Sector->damage
+					{
+						if (funcIndex == ACSF_GetMapData)
+							return Sector->damage;
+
+						if (funcIndex == ACSF_SetMapData)
+						{
+							Sector->damage = value;
+							// [JM] Does this need to be networked?
+							return 1;
+						}
+
+						if (funcIndex == ACSF_FindMapData)
+						{
+							for (int i = index; i < numsectors; i++)
+							{
+								if (sectors[i].damage == value)
+									return i;
+							}
+						}
+
+						return -1;
+					}
+
+					case SECTProp_MeansOfDeath:		// Sector->mod
+					{
+						if (funcIndex == ACSF_GetMapData)
+							return Sector->mod;
+
+						if (funcIndex == ACSF_SetMapData)
+						{
+							Sector->mod = value;
+							// [JM] Need networking?
+							return 1;
+						}
+
+						if (funcIndex == ACSF_FindMapData)
+						{
+							for (int i = index; i < numsectors; i++)
+							{
+								if (sectors[i].mod == value)
+									return i;
+							}
+						}
+
+						return -1;
+					}
+
+					case SECTProp_SeqType:			// Sector->seqtype
+					{
+						if (funcIndex == ACSF_GetMapData)
+							return Sector->seqType;
+
+						if (funcIndex == ACSF_SetMapData)
+						{
+							Sector->seqType = value;
+							// Todo: Tell clients this has changed.
+							return 1;
+						}
+
+						if (funcIndex == ACSF_FindMapData)
+						{
+							for (int i = index; i < numsectors; i++)
+							{
+								if (sectors[i].seqType == value)
+									return i;
+							}
+						}
+
+						return -1;
+					}
+
+					case SECTProp_SeqName:
+					{
+						if (funcIndex == ACSF_GetMapData)
+							return GlobalACSStrings.AddString(Sector->SeqName);
+
+						if (funcIndex == ACSF_SetMapData)
+						{
+							const char* seqname = FBehavior::StaticLookupString(value);
+
+							if (seqname == NULL)
+								return -1;
+
+							Sector->SeqName = seqname;
+							// Todo: Tell clients this has changed.
+							return 1;
+						}
+
+						if (funcIndex == ACSF_FindMapData)
+						{
+							const char* seqname = FBehavior::StaticLookupString(value);
+							for (int i = index; i < numsectors; i++)
+							{
+								if (!stricmp(seqname, sectors[i].SeqName))
+									return i;
+							}
+						}
+
+						return -1;
+					}
+
+					case SECTProp_Sky:				// Sector->sky
+					{
+						if (funcIndex == ACSF_GetMapData)
+							return Sector->sky;
+
+						if (funcIndex == ACSF_SetMapData)
+						{
+							Sector->sky = value;
+							// Todo: Tell clients this has changed.
+							return 1;
+						}
+
+						if (funcIndex == ACSF_FindMapData)
+						{
+							for (int i = index; i < numsectors; i++)
+							{
+								if (sectors[i].sky == value)
+									return i;
+							}
+						}
+
+						return -1;
+					}
+
+					case SECTProp_LineCount:
+					{
+						if (funcIndex == ACSF_GetMapData)
+							return Sector->linecount;
+
+						if (funcIndex == ACSF_SetMapData)
+						{
+							Printf("SetMapData: SECTProp_LineCount cannot be set!");
+							return -1;
+						}
+
+						if (funcIndex == ACSF_FindMapData)
+						{
+							for (int i = index; i < numsectors; i++)
+							{
+								if (sectors[i].linecount == value)
+									return i;
+							}
+						}
+
+						return -1;
+					}
+
+					case SECTProp_SectorLineIndex:		// Sector->lines[value] - lines
+					{
+						if (funcIndex == ACSF_GetMapData)
+						{
+							if (value >= Sector->linecount)
+								return Sector->lines[0] - lines;
+
+							if (Sector->linecount <= 0)
+								return -1;
+
+							return Sector->lines[value] - lines;
+						}
+
+						if (funcIndex == ACSF_SetMapData)
+						{
+							Printf("SetMapData: SECTProp_SectorLineIndex cannot be set!");
+							return -1;
+						}
+
+						if (funcIndex == ACSF_FindMapData)
+						{
+							Printf("SetMapData: SECTProp_SectorLineIndex cannot be searched for!");
+							return -1;
+						}
+					}
+
+					case SECTProp_FloorXOffset:			// Sector->planes[0].xform.xoffs
+					case SECTProp_CeilingXOffset:		// Sector->planes[1].xform.xoffs
+					{
+						int plane = (property == SECTProp_FloorXOffset) ? sector_t::floor : sector_t::ceiling;
+
+						if (funcIndex == ACSF_GetMapData)
+							return Sector->planes[plane].xform.xoffs;
+
+						if (funcIndex == ACSF_SetMapData)
+						{
+							Sector->planes[plane].xform.xoffs = value;
+
+							if (NETWORK_GetState() == NETSTATE_SERVER)
+								SERVERCOMMANDS_SetSectorPanning(index);
+
+							return 1;
+						}
+
+						if (funcIndex == ACSF_FindMapData)
+						{
+							for (int i = index; i < numsectors; i++)
+							{
+								if (sectors[i].planes[plane].xform.xoffs == value)
+									return i;
+							}
+						}
+
+						return -1;
+					}
+
+					case SECTProp_FloorYOffset:			// Sector->planes[0].xform.yoffs
+					case SECTProp_CeilingYOffset:		// Sector->planes[1].xform.yoffs
+					{
+						int plane = (property == SECTProp_FloorYOffset) ? sector_t::floor : sector_t::ceiling;
+
+						if (funcIndex == ACSF_GetMapData)
+							return Sector->planes[plane].xform.yoffs;
+
+						if (funcIndex == ACSF_SetMapData)
+						{
+							Sector->planes[plane].xform.yoffs = value;
+
+							if (NETWORK_GetState() == NETSTATE_SERVER)
+								SERVERCOMMANDS_SetSectorPanning(index);
+
+							return 1;
+						}
+
+						if (funcIndex == ACSF_FindMapData)
+						{
+							for (int i = index; i < numsectors; i++)
+							{
+								if (sectors[i].planes[plane].xform.yoffs == value)
+									return i;
+							}
+						}
+
+						return -1;
+					}
+
+					case SECTProp_FloorXScale:			// Sector->planes[0].xform.xscale
+					case SECTProp_CeilingXScale:		// Sector->planes[1].xform.xscale
+					{
+						int plane = (property == SECTProp_FloorXScale) ? sector_t::floor : sector_t::ceiling;
+
+						if (funcIndex == ACSF_GetMapData)
+							return Sector->planes[plane].xform.xscale;
+
+						if (funcIndex == ACSF_SetMapData)
+						{
+							Sector->planes[plane].xform.xscale = value;
+
+							if (NETWORK_GetState() == NETSTATE_SERVER)
+								SERVERCOMMANDS_SetSectorScale(index);
+
+							return 1;
+						}
+
+						if (funcIndex == ACSF_FindMapData)
+						{
+							for (int i = index; i < numsectors; i++)
+							{
+								if (sectors[i].planes[plane].xform.xscale == value)
+									return i;
+							}
+						}
+
+						return -1;
+					}
+
+					case SECTProp_FloorYScale:			// Sector->planes[0].xform.yscale
+					case SECTProp_CeilingYScale:		// Sector->planes[1].xform.yscale
+					{
+						int plane = (property == SECTProp_FloorYScale) ? sector_t::floor : sector_t::ceiling;
+
+						if (funcIndex == ACSF_GetMapData)
+							return Sector->planes[plane].xform.yscale;
+
+						if (funcIndex == ACSF_SetMapData)
+						{
+							Sector->planes[plane].xform.yscale = value;
+
+							if (NETWORK_GetState() == NETSTATE_SERVER)
+								SERVERCOMMANDS_SetSectorScale(index);
+
+							return 1;
+						}
+
+						if (funcIndex == ACSF_FindMapData)
+						{
+							for (int i = index; i < numsectors; i++)
+							{
+								if (sectors[i].planes[plane].xform.yscale == value)
+									return i;
+							}
+						}
+
+						return -1;
+					}
+
+					case SECTProp_FloorAngle:			// Sector->planes[0].xform.angle
+					case SECTProp_CeilingAngle:			// Sector->planes[1].xform.angle
+					{
+						int plane = (property == SECTProp_FloorAngle) ? sector_t::floor : sector_t::ceiling;
+
+						if (funcIndex == ACSF_GetMapData)
+							return Sector->planes[plane].xform.angle;
+
+						if (funcIndex == ACSF_SetMapData)
+						{
+							Sector->planes[plane].xform.angle = value;
+
+							if (NETWORK_GetState() == NETSTATE_SERVER)
+								SERVERCOMMANDS_SetSectorRotation(index);
+
+							return 1;
+						}
+
+						if (funcIndex == ACSF_FindMapData)
+						{
+							for (int i = index; i < numsectors; i++)
+							{
+								if (sectors[i].planes[plane].xform.angle == value)
+									return i;
+							}
+						}
+
+						return -1;
+					}
+
+					case SECTProp_FloorBaseAngle:		// Sector->planes[0].xform.base_angle
+					case SECTProp_CeilingBaseAngle:		// Sector->planes[1].xform.base_angle
+					{
+						int plane = (property == SECTProp_FloorBaseAngle) ? sector_t::floor : sector_t::ceiling;
+
+						if (funcIndex == ACSF_GetMapData)
+							return Sector->planes[plane].xform.base_angle;
+
+						if (funcIndex == ACSF_SetMapData)
+						{
+							Sector->planes[plane].xform.base_angle = value;
+
+							if (NETWORK_GetState() == NETSTATE_SERVER)
+								SERVERCOMMANDS_SetSectorAngleYOffset(index);
+
+							return 1;
+						}
+
+						if (funcIndex == ACSF_FindMapData)
+						{
+							for (int i = index; i < numsectors; i++)
+							{
+								if (sectors[i].planes[plane].xform.base_angle == value)
+									return i;
+							}
+						}
+
+						return -1;
+					}
+
+					case SECTProp_FloorBaseYOffset:		// Sector->planes[0].xform.base_yoffs
+					case SECTProp_CeilingBaseYOffset:	// Sector->planes[1].xform.base_yoffs
+					{
+						int plane = (property == SECTProp_FloorBaseYOffset) ? sector_t::floor : sector_t::ceiling;
+
+						if (funcIndex == ACSF_GetMapData)
+							return Sector->planes[plane].xform.base_yoffs;
+
+						if (funcIndex == ACSF_SetMapData)
+						{
+							Sector->planes[plane].xform.base_yoffs = value;
+
+							if (NETWORK_GetState() == NETSTATE_SERVER)
+								SERVERCOMMANDS_SetSectorAngleYOffset(index);
+
+							return 1;
+						}
+
+						if (funcIndex == ACSF_FindMapData)
+						{
+							for (int i = index; i < numsectors; i++)
+							{
+								if (sectors[i].planes[plane].xform.base_yoffs == value)
+									return i;
+							}
+						}
+
+						return -1;
+					}
+
+					case SECTProp_FloorAlpha:			// Sector->planes[0].alpha
+					case SECTProp_CeilingAlpha:			// Sector->planes[1].alpha
+					{
+						int plane = (property == SECTProp_FloorAlpha) ? sector_t::floor : sector_t::ceiling;
+
+						if (funcIndex == ACSF_GetMapData)
+							return Sector->planes[plane].alpha;
+
+						if (funcIndex == ACSF_SetMapData)
+						{
+							Sector->planes[plane].alpha = value;
+
+							//if (NETWORK_GetState() == NETSTATE_SERVER)
+								//SERVERCOMMANDS_SetSectorAlpha(index); // Need this in the future, methinks.
+
+							return 1;
+						}
+
+						if (funcIndex == ACSF_FindMapData)
+						{
+							for (int i = index; i < numsectors; i++)
+							{
+								if (sectors[i].planes[plane].alpha == value)
+									return i;
+							}
+						}
+
+						return -1;
+					}
+
+					case SECTProp_FloorLight:			// Sector->planes[0].Light
+					case SECTProp_CeilingLight:			// Sector->planes[1].Light
+					{
+						int plane = (property == SECTProp_FloorLight) ? sector_t::floor : sector_t::ceiling;
+
+						if (funcIndex == ACSF_GetMapData)
+							return Sector->planes[plane].Light;
+
+						if (funcIndex == ACSF_SetMapData)
+						{
+							Sector->planes[plane].Light = value;
+
+							//if (NETWORK_GetState() == NETSTATE_SERVER)
+								//SERVERCOMMANDS_SetSectorPlaneLight(index); // Need this in the future, methinks.
+
+							return 1;
+						}
+
+						if (funcIndex == ACSF_FindMapData)
+						{
+							for (int i = index; i < numsectors; i++)
+							{
+								if (sectors[i].planes[plane].Light == value)
+									return i;
+							}
+						}
+
+						return -1;
+					}
+
+					default:
+						Printf("Get/Set/FindMapData: Unknown sector property type %d", property);
+						return -1; // Unimplemented
+				}
+			}
+
+			return -1;
+			break;
+		}
+
 		default:
 			break;
 	}
diff -r 23057c3943ce -r 6cd1ae47a34f src/p_saveg.cpp
--- a/src/p_saveg.cpp	Sat Apr 26 01:15:17 2025 -0300
+++ b/src/p_saveg.cpp	Sun Jun 01 00:06:29 2025 -0300
@@ -450,7 +450,8 @@
 			<< sec->SavedFloorPic
 			<< sec->SavedCeilingPic
 			<< sec->bLightChange
-			<< sec->SavedLightLevel;
+			<< sec->SavedLightLevel
+			<< sec->SavedTag;
 		if (arc.IsStoring ())
 		{
 			arc << sec->SavedColorMap->Color
diff -r 23057c3943ce -r 6cd1ae47a34f src/p_setup.cpp
--- a/src/p_setup.cpp	Sat Apr 26 01:15:17 2025 -0300
+++ b/src/p_setup.cpp	Sun Jun 01 00:06:29 2025 -0300
@@ -3471,6 +3471,77 @@
 	}
 }
 
+static inline int SECTORTAGHASH(int sectNum) { return (unsigned)sectors[sectNum].tag % (unsigned)numsectors; }
+static void AddSectorToTagHash(int sectNum) // [JM] Hashes tagged sectors in a linear order. Discard once the tag manager from ZDoom is added.
+{
+	int tagNum = SECTORTAGHASH(sectNum);
+
+	if ((sectNum < sectors[tagNum].firsttag) || (sectors[tagNum].firsttag <= -1))
+	{
+		sectors[sectNum].nexttag = sectors[tagNum].firsttag; // Old first sector for tag becomes next.
+		sectors[tagNum].firsttag = sectNum; // First sector becomes this.
+	}
+	else if(sectNum > sectors[tagNum].firsttag)
+	{
+		int index = sectors[tagNum].firsttag;
+		while (index >= 0) // Find a slot to slip this sector into.
+		{
+			int lastindex = index;
+			index = sectors[index].nexttag;
+			if (index > sectNum) // Next sector index is higher than this one.
+			{
+				sectors[lastindex].nexttag = sectNum; // Set the last index's next sector to this.
+				sectors[sectNum].nexttag = index; // Set the next sector for this one to the higher one.
+				break;
+			}
+		}
+	}
+}
+
+// [JM] Removes from the sector tag hash. This will need to be adapted to the tag manager in the future
+//		as its tag manager doesn't have a way to remove a sector from a single tag, just all tags.
+static void RemoveSectorFromTagHash(int sectNum)
+{
+	if (sectors[sectNum].tag == 0)
+		return;
+
+	int tagNum = SECTORTAGHASH(sectNum);
+	if (sectNum == sectors[tagNum].firsttag)
+	{
+		sectors[tagNum].firsttag = sectors[sectNum].nexttag;
+		sectors[sectNum].nexttag = -1;
+		sectors[sectNum].tag = 0;
+	}
+	else
+	{
+		int index = sectors[tagNum].firsttag;
+		while (index >= 0)
+		{
+			int lastindex = index;
+			index = sectors[index].nexttag;
+			if (index == sectNum)
+			{
+				sectors[lastindex].nexttag = sectors[index].nexttag;
+				sectors[index].nexttag = -1;
+				sectors[index].tag = 0;
+				return;
+			}
+		}
+	}
+}
+
+void ChangeSectorTag(int sectNum, int tag) // [JM] Handle sector tag changes.
+{
+	sector_t* Sector = &sectors[sectNum];
+	if ((Sector->tag == tag) || (tag < 0))
+		return;
+
+	RemoveSectorFromTagHash(sectNum);
+	Sector->tag = tag;
+	AddSectorToTagHash(sectNum);
+
+}
+
 // Hash the sector tags across the sectors and linedefs.
 static void P_InitTagLists ()
 {
diff -r 23057c3943ce -r 6cd1ae47a34f src/p_setup.h
--- a/src/p_setup.h	Sat Apr 26 01:15:17 2025 -0300
+++ b/src/p_setup.h	Sun Jun 01 00:06:29 2025 -0300
@@ -170,5 +170,7 @@
 extern TMap<unsigned,unsigned> MapThingsUserDataIndex;	// from mapthing idx -> user data idx
 extern TArray<FMapThingUserData> MapThingsUserData;
 
+void ChangeSectorTag(int sectNum, int tag); // [JM] Handle sector tag changes.
+
 
 #endif
diff -r 23057c3943ce -r 6cd1ae47a34f src/p_spec.cpp
--- a/src/p_spec.cpp	Sat Apr 26 01:15:17 2025 -0300
+++ b/src/p_spec.cpp	Sun Jun 01 00:06:29 2025 -0300
@@ -1785,6 +1785,7 @@
 		sectors[i].SavedMOD = sectors[i].mod;
 		sectors[i].SavedCeilingReflect = sectors[i].reflect[sector_t::ceiling];
 		sectors[i].SavedFloorReflect = sectors[i].reflect[sector_t::floor];
+		sectors[i].SavedTag = sectors[i].tag; // [JM]
 	}
 
 	// [RH] Start running any open scripts on this map
diff -r 23057c3943ce -r 6cd1ae47a34f src/r_defs.h
--- a/src/r_defs.h	Sat Apr 26 01:15:17 2025 -0300
+++ b/src/r_defs.h	Sun Jun 01 00:06:29 2025 -0300
@@ -853,6 +853,7 @@
 	short				SavedSpecial;
 	short				SavedDamage;
 	short				SavedMOD;
+	short				SavedTag; // [JM]
 	float				SavedCeilingReflect;
 	float				SavedFloorReflect;
 
diff -r 23057c3943ce -r 6cd1ae47a34f src/sv_commands.cpp
--- a/src/sv_commands.cpp	Sat Apr 26 01:15:17 2025 -0300
+++ b/src/sv_commands.cpp	Sun Jun 01 00:06:29 2025 -0300
@@ -3072,6 +3072,19 @@
 }
 
 //*****************************************************************************
+// [JM]
+void SERVERCOMMANDS_SetSectorTag(ULONG ulSector, ULONG ulPlayerExtra, ServerCommandFlags flags)
+{
+	if (ulSector >= (ULONG)numsectors)
+		return;
+
+	ServerCommands::SetSectorTag command;
+	command.SetSector(&sectors[ulSector]);
+	command.SetTag(sectors[ulSector].tag);
+	command.sendCommandToClients(ulPlayerExtra, flags);
+}
+
+//*****************************************************************************
 //
 void SERVERCOMMANDS_SetSectorColor( ULONG ulSector, ULONG ulPlayerExtra, ServerCommandFlags flags )
 {
diff -r 23057c3943ce -r 6cd1ae47a34f src/sv_commands.h
--- a/src/sv_commands.h	Sat Apr 26 01:15:17 2025 -0300
+++ b/src/sv_commands.h	Sun Jun 01 00:06:29 2025 -0300
@@ -253,6 +253,7 @@
 void	SERVERCOMMANDS_SetSectorFloorPlaneSlope( ULONG ulSector, ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );
 void	SERVERCOMMANDS_SetSectorCeilingPlaneSlope( ULONG ulSector, ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );
 void	SERVERCOMMANDS_SetSectorLightLevel( ULONG ulSector, ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );
+void	SERVERCOMMANDS_SetSectorTag( ULONG ulSector, ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 ); // [JM]
 void	SERVERCOMMANDS_SetSectorColor( ULONG ulSector, ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );
 void	SERVERCOMMANDS_SetSectorColorByTag( ULONG ulTag, ULONG ulRed, ULONG ulGreen, ULONG ulBlue, ULONG ulDesaturate, ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );
 void	SERVERCOMMANDS_SetSectorFade( ULONG ulSector, ULONG ulPlayerExtra = MAXPLAYERS, ServerCommandFlags flags = 0 );
diff -r 23057c3943ce -r 6cd1ae47a34f src/sv_main.cpp
--- a/src/sv_main.cpp	Sat Apr 26 01:15:17 2025 -0300
+++ b/src/sv_main.cpp	Sun Jun 01 00:06:29 2025 -0300
@@ -3503,6 +3503,10 @@
 		if ( pSector->bLightChange )
 			SERVERCOMMANDS_SetSectorLightLevel( ulIdx, ulClient, SVCF_ONLYTHISCLIENT );
 
+		// Update the sector's tag.
+		if (pSector->SavedTag != pSector->tag)
+			SERVERCOMMANDS_SetSectorTag(ulIdx, ulClient, SVCF_ONLYTHISCLIENT);
+
 		// Update the sector's reflection.
 		if (( pSector->SavedCeilingReflect != pSector->reflect[sector_t::ceiling] ) ||
 			( pSector->SavedFloorReflect != pSector->reflect[sector_t::floor] ))
